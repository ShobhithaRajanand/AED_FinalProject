/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.DoctorWorkspace;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.LabEnterprise;
import Business.Entity.Donor;
import Business.Entity.Recipient;
import Business.Network.Network;
import Business.Organization.InternalLabOrg;
import Business.Organization.Organization;
import Business.Organization.PathologyOrg;
import Business.Organization.RadiologyOrg;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DonorValidationWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author amityadav
 */
public class DoctorRequestPatientTestPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorRequestPatientTestPanel
     */
    JPanel rightJPanel;
    Enterprise enterprise;
    private UserAccount account;
    EcoSystem business;

    void populatePatientIdDropdown() {
       
    }

    public DoctorRequestPatientTestPanel(JPanel rightJPanel, Enterprise enterprise, UserAccount account, EcoSystem business) {
        initComponents();
        this.rightJPanel = rightJPanel;
        this.enterprise = enterprise;
        this.account = account;
        this.business = business;
        populatePatientIdDropdown();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        askToTakeTestButton = new javax.swing.JButton();
        bloodTestCheckbox = new javax.swing.JCheckBox();
        cancerScreeningCheckbox = new javax.swing.JCheckBox();
        donorListLbl = new javax.swing.JLabel();
        patientListDropdown = new javax.swing.JComboBox();
        listofTestsLbl = new javax.swing.JLabel();
        chestXrayCheckbox = new javax.swing.JCheckBox();
        radiologicTestingCheckbox = new javax.swing.JCheckBox();
        gynecologicalScreeningCheckbox = new javax.swing.JCheckBox();
        checkDonorReportsBtn = new javax.swing.JButton();
        veiwTestResultsLbl = new javax.swing.JLabel();
        testSuggestionPanelLbl = new javax.swing.JLabel();
        donorListDropdown = new javax.swing.JComboBox();
        requestDonorTestBtn = new javax.swing.JButton();
        checkRecipientReportsBtn = new javax.swing.JButton();
        pathologyLabTestsLbl = new javax.swing.JLabel();
        localLabTestsLbl = new javax.swing.JLabel();
        radiologyLabTestsLbl = new javax.swing.JLabel();
        requestPatientTestBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        patientlistLbl = new javax.swing.JLabel();

        askToTakeTestButton.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        askToTakeTestButton.setText("Request Patient Test");
        askToTakeTestButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        askToTakeTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askToTakeTestButtonActionPerformed(evt);
            }
        });

        setBackground(new java.awt.Color(153, 204, 255));
        setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N

        bloodTestCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        bloodTestCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bloodTestCheckbox.setText("Blood Test");

        cancerScreeningCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        cancerScreeningCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cancerScreeningCheckbox.setText("Cancer Screening");

        donorListLbl.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        donorListLbl.setText("Donor List");

        patientListDropdown.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        patientListDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientListDropdownActionPerformed(evt);
            }
        });

        listofTestsLbl.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        listofTestsLbl.setText("List Of Tests");

        chestXrayCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        chestXrayCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chestXrayCheckbox.setText("Chest X-Ray and EKG");
        chestXrayCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chestXrayCheckboxActionPerformed(evt);
            }
        });

        radiologicTestingCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        radiologicTestingCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        radiologicTestingCheckbox.setText("Radiologic Testing");
        radiologicTestingCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiologicTestingCheckboxActionPerformed(evt);
            }
        });

        gynecologicalScreeningCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        gynecologicalScreeningCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        gynecologicalScreeningCheckbox.setText("Gynecological screening");
        gynecologicalScreeningCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gynecologicalScreeningCheckboxActionPerformed(evt);
            }
        });

        checkDonorReportsBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        checkDonorReportsBtn.setText("Check Donor Reports");
        checkDonorReportsBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkDonorReportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDonorReportsBtnActionPerformed(evt);
            }
        });

        veiwTestResultsLbl.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        veiwTestResultsLbl.setText("View Test Results");

        testSuggestionPanelLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        testSuggestionPanelLbl.setText("Test Suggestion Panel");

        donorListDropdown.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        donorListDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donorListDropdownActionPerformed(evt);
            }
        });

        requestDonorTestBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        requestDonorTestBtn.setText("Request Donor Test");
        requestDonorTestBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        requestDonorTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestDonorTestBtnActionPerformed(evt);
            }
        });

        checkRecipientReportsBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        checkRecipientReportsBtn.setText("Check Recipient Reports");
        checkRecipientReportsBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkRecipientReportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRecipientReportsBtnActionPerformed(evt);
            }
        });

        pathologyLabTestsLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pathologyLabTestsLbl.setText("Pathology Lab Tests");

        localLabTestsLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        localLabTestsLbl.setText("Local Lab Tests");

        radiologyLabTestsLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        radiologyLabTestsLbl.setText("Radiology Lab Tests");

        requestPatientTestBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        requestPatientTestBtn.setText("Request Patient Test");
        requestPatientTestBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        requestPatientTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestPatientTestBtnActionPerformed(evt);
            }
        });

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/left-arrow-in-circular-button-black-symbol-2.png"))); // NOI18N
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        patientlistLbl.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        patientlistLbl.setText("Patient List");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(veiwTestResultsLbl)
                                .addGap(68, 68, 68))
                            .addComponent(checkRecipientReportsBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkDonorReportsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(localLabTestsLbl)
                            .addComponent(bloodTestCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listofTestsLbl)
                            .addComponent(chestXrayCheckbox))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gynecologicalScreeningCheckbox)
                            .addComponent(pathologyLabTestsLbl))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radiologyLabTestsLbl)
                            .addComponent(radiologicTestingCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancerScreeningCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(patientlistLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146)
                        .addComponent(testSuggestionPanelLbl)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientListDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(donorListLbl)
                            .addComponent(donorListDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(requestPatientTestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(requestDonorTestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testSuggestionPanelLbl))
                .addGap(47, 47, 47)
                .addComponent(patientlistLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(requestPatientTestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(patientListDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(donorListLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(requestDonorTestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(donorListDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(listofTestsLbl)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pathologyLabTestsLbl)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(localLabTestsLbl)
                        .addComponent(radiologyLabTestsLbl)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bloodTestCheckbox)
                    .addComponent(gynecologicalScreeningCheckbox)
                    .addComponent(radiologicTestingCheckbox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chestXrayCheckbox)
                    .addComponent(cancerScreeningCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(veiwTestResultsLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkRecipientReportsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkDonorReportsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void askToTakeTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_askToTakeTestButtonActionPerformed
        if (!bloodTestCheckbox.isSelected() && !gynecologicalScreeningCheckbox.isSelected() && !cancerScreeningCheckbox.isSelected()
                && !radiologicTestingCheckbox.isSelected() && !chestXrayCheckbox.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }

        if (patientListDropdown.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "No patient selected!");
            return;
        }
        Recipient r = (Recipient) patientListDropdown.getItemAt(patientListDropdown.getSelectedIndex());
        r.setIsDocAssigned(true);
        r.setDocAssignedEmaild(account.getUsername());
        if (bloodTestCheckbox.isSelected() || chestXrayCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setMessage("Blood Test, Xray Requested");
            request.setSender(account);
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Patient");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Gynecological Tests Requested");
            request.setStatus("Request Raised");
            request.setPatientType("Patient");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
            }
        }
        if (cancerScreeningCheckbox.isSelected() || radiologicTestingCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setSender(account);
            request.setMessage("Radiology Screening Requested");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Patient");
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
            }
        }
        chestXrayCheckbox.setSelected(false);
        radiologicTestingCheckbox.setSelected(false);
        gynecologicalScreeningCheckbox.setSelected(false);
        bloodTestCheckbox.setSelected(false);
        cancerScreeningCheckbox.setSelected(false);

    }//GEN-LAST:event_askToTakeTestButtonActionPerformed

    private void checkDonorReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDonorReportsBtnActionPerformed
      

    }//GEN-LAST:event_checkDonorReportsBtnActionPerformed

    private void chestXrayCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chestXrayCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chestXrayCheckboxActionPerformed

    private void requestDonorTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestDonorTestBtnActionPerformed
        // TODO add your handling code here:
        if (!bloodTestCheckbox.isSelected() && !gynecologicalScreeningCheckbox.isSelected() && !cancerScreeningCheckbox.isSelected()
                && !radiologicTestingCheckbox.isSelected() && !chestXrayCheckbox.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }
        if (donorListDropdown.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "No donor selected!");
            return;
        }

        Donor r = (Donor) donorListDropdown.getItemAt(donorListDropdown.getSelectedIndex());
        r.setIsDocAssigned(true);
        r.setDocAssignedEmaild(account.getUsername());
        if (bloodTestCheckbox.isSelected() || chestXrayCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setMessage("Blood Test, Xray Requested");
            request.setSender(account);
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Donor");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
            }

        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Gynecological Tests Requested");
            request.setStatus("Request Raised");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Donor");
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
                System.out.println("Creating A Request For Pathology Lab For Patient:" + request.getPatientId());
            }
        }
        if (cancerScreeningCheckbox.isSelected() || radiologicTestingCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setSender(account);
            request.setMessage("Requesting all screening for patient");
            request.setPatientType("Donor");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
            }
//            int count = 0;
            for (WorkRequest w : enterprise.getWorkQueue().getWorkRequestList()) {
                if (w instanceof DonorValidationWorkRequest) {
                    DonorValidationWorkRequest a = (DonorValidationWorkRequest) w;
                    if (r.getPersonEmailId().equalsIgnoreCase(a.getPatientId())) {
                        a.setStatus("Requested Lab Tests");
                    }
                }
            }
//            if (count == 0) {
//                {
//                    DonorValidationWorkRequest validationRequest = new DonorValidationWorkRequest();
//                    Donor d = (Donor) donorComboName.getItemAt(donorComboName.getSelectedIndex());
//                    validationRequest.setStatus("Validation In Progress");
//                    validationRequest.setMessage("Awaiting Test Results");
//                    validationRequest.setSender(account);
//                    validationRequest.setReceiverName(enterprise.getName());
//                    validationRequest.setPatientName(d.getPersonName());
//                    validationRequest.setPatientId(d.getPersonEmailId());
//                    if (enterprise != null) {
//                        enterprise.getWorkQueue().getWorkRequestList().add(validationRequest);
//                        account.getWorkQueue().getWorkRequestList().add(validationRequest);
//                    }
//                }
//            }
        }
        chestXrayCheckbox.setSelected(false);
        radiologicTestingCheckbox.setSelected(false);
        gynecologicalScreeningCheckbox.setSelected(false);
        bloodTestCheckbox.setSelected(false);
        cancerScreeningCheckbox.setSelected(false);
    }//GEN-LAST:event_requestDonorTestBtnActionPerformed

    private void checkRecipientReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRecipientReportsBtnActionPerformed
        // TODO add your handling code here:
        List<String> testLists = new ArrayList<>();
        if (bloodTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (radiologicTestingCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (chestXrayCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        Recipient patient = (Recipient) patientListDropdown.getItemAt(patientListDropdown.getSelectedIndex());
        String patientId = patient.getPersonEmailId();
        ActivityAreaForDoctorPanel doctorActivityArea = new ActivityAreaForDoctorPanel(rightJPanel, account, enterprise, patientId, testLists, "Patient");
        rightJPanel.add("ActivityScreenForDoctor", doctorActivityArea);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.next(rightJPanel);
    }//GEN-LAST:event_checkRecipientReportsBtnActionPerformed

    private void patientListDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientListDropdownActionPerformed
        // TODO add your handling code here: 

    }//GEN-LAST:event_patientListDropdownActionPerformed

    private void gynecologicalScreeningCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gynecologicalScreeningCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gynecologicalScreeningCheckboxActionPerformed

    private void radiologicTestingCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiologicTestingCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radiologicTestingCheckboxActionPerformed

    private void requestPatientTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestPatientTestBtnActionPerformed
        // TODO add your handling code here:
        if (!bloodTestCheckbox.isSelected() && !gynecologicalScreeningCheckbox.isSelected() && !cancerScreeningCheckbox.isSelected()
                && !radiologicTestingCheckbox.isSelected() && !chestXrayCheckbox.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }
        Recipient r = (Recipient) patientListDropdown.getItemAt(patientListDropdown.getSelectedIndex());
        r.setIsDocAssigned(true);
        r.setDocAssignedEmaild(account.getUsername());
        if (bloodTestCheckbox.isSelected() || chestXrayCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setMessage("Blood Test, Xray Requested");
            request.setSender(account);
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Patient");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
            }

        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Gynecological Tests Requested");
            request.setStatus("Request Raised");
            request.setPatientType("Patient");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
            }
        }
        if (cancerScreeningCheckbox.isSelected() || radiologicTestingCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setSender(account);
            request.setMessage("Radiology Screening Requested");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Patient");
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
            }
        }
        chestXrayCheckbox.setSelected(false);
        radiologicTestingCheckbox.setSelected(false);
        gynecologicalScreeningCheckbox.setSelected(false);
        bloodTestCheckbox.setSelected(false);
        cancerScreeningCheckbox.setSelected(false);
    }//GEN-LAST:event_requestPatientTestBtnActionPerformed

    private void donorListDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donorListDropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_donorListDropdownActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        rightJPanel.remove(this);
        Component[] componentArray = rightJPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout cardLayout = (CardLayout) rightJPanel.getLayout();
        cardLayout.previous(rightJPanel);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton askToTakeTestButton;
    private javax.swing.JButton backBtn;
    private javax.swing.JCheckBox bloodTestCheckbox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cancerScreeningCheckbox;
    private javax.swing.JButton checkDonorReportsBtn;
    private javax.swing.JButton checkRecipientReportsBtn;
    private javax.swing.JCheckBox chestXrayCheckbox;
    private javax.swing.JComboBox donorListDropdown;
    private javax.swing.JLabel donorListLbl;
    private javax.swing.JCheckBox gynecologicalScreeningCheckbox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel listofTestsLbl;
    private javax.swing.JLabel localLabTestsLbl;
    private javax.swing.JLabel pathologyLabTestsLbl;
    private javax.swing.JComboBox patientListDropdown;
    private javax.swing.JLabel patientlistLbl;
    private javax.swing.JCheckBox radiologicTestingCheckbox;
    private javax.swing.JLabel radiologyLabTestsLbl;
    private javax.swing.JButton requestDonorTestBtn;
    private javax.swing.JButton requestPatientTestBtn;
    private javax.swing.JLabel testSuggestionPanelLbl;
    private javax.swing.JLabel veiwTestResultsLbl;
    // End of variables declaration//GEN-END:variables
}
