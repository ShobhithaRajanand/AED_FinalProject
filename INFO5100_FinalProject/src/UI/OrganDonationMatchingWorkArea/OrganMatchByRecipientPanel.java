/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.OrganDonationMatchingWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Entity.Donor;
import Business.Entity.Recipient;
import Business.Network.Network;
import Business.Organization.Organization;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.awt.CardLayout;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author aditi
 */
public class OrganMatchByRecipientPanel extends javax.swing.JPanel {

    
    EcoSystem ecoSystem;
    JPanel panel;
    List<Recipient> rList;
    Donor donor;
    Recipient recipient;
    /**
     * Creates new form OrganMatchByRecipientPanel
     */
    public OrganMatchByRecipientPanel(EcoSystem ecoSystem, JPanel panel, List<Recipient> rList) {
        initComponents();
        this.ecoSystem = ecoSystem;
        this.panel = panel;
        this.rList = rList;
        
        populateTableForRecipient();
        
    }
    
    private void populateTableForRecipient(){
        DefaultTableModel dtm = (DefaultTableModel) recipientInfoTbl.getModel();
        dtm.setRowCount(0);

        for (Recipient rec : rList) {
            Object[] rows = new Object[4];
            rows[0] = rec;
            rows[2] = rec.getOrganType();
            rows[1] = rec.getNetwork();           
            rows[3] = rec.getPriorityNo();
            dtm.addRow(rows);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        recipientInfoTbl = new javax.swing.JTable();
        findMatchBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        applicantInfoTbl = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        seePieChartBtn = new javax.swing.JButton();
        informAboutMatchBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        recipientInfoTbl.setBackground(java.awt.SystemColor.info);
        recipientInfoTbl.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        recipientInfoTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Recipient Name", "Network", "Organ", "Severity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(recipientInfoTbl);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 800, 170));

        findMatchBtn.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        findMatchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/icons8-searching-32.png"))); // NOI18N
        findMatchBtn.setText("Click To Find Match");
        findMatchBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        findMatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMatchBtnActionPerformed(evt);
            }
        });
        add(findMatchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 310, 270, -1));

        applicantInfoTbl.setBackground(java.awt.SystemColor.info);
        applicantInfoTbl.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        applicantInfoTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Applicant (Donor) Name", "Network", "Current Organ Availabilty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(applicantInfoTbl);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, 800, 170));

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/left-arrow-in-circular-button-black-symbol-2.png"))); // NOI18N
        backBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 140, 40));

        seePieChartBtn.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        seePieChartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/icons8-chart-24.png"))); // NOI18N
        seePieChartBtn.setText("See PieChart");
        seePieChartBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        seePieChartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seePieChartBtnActionPerformed(evt);
            }
        });
        add(seePieChartBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, 230, 40));

        informAboutMatchBtn.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        informAboutMatchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/icons8-new-message-32.png"))); // NOI18N
        informAboutMatchBtn.setText("Click To Inform Match");
        informAboutMatchBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        informAboutMatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informAboutMatchBtnActionPerformed(evt);
            }
        });
        add(informAboutMatchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 600, 270, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void findMatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMatchBtnActionPerformed

        int selectedRow = recipientInfoTbl.getSelectedRow();      
        
        if(selectedRow >= 0){
           recipient = (Recipient) recipientInfoTbl.getValueAt(selectedRow, 0);
           String network = (String) recipientInfoTbl.getValueAt(selectedRow, 1);
           String organType = (String) recipientInfoTbl.getValueAt(selectedRow, 2);

           populateDonorTable(network, organType);    
        }else{

            JOptionPane.showMessageDialog(null, "Please select a row.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_findMatchBtnActionPerformed

    private void populateDonorTable(String network, String organType){
        DefaultTableModel dtm = (DefaultTableModel) applicantInfoTbl.getModel();
        List<Donor> donorL = new ArrayList<>();

        dtm.setRowCount(0);
        for (Network network1 : ecoSystem.getNetworks()) {
            for (Enterprise enterprise : network1.getEnterpriseDirectory().getEnterpriseList()) {
                if(enterprise instanceof HospitalEnterprise){
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization.getName().equalsIgnoreCase("Applicant Org")) {
                            for (Donor donor : organization.getDonorDirectory().getDonorRecords()) {
                                for (String orgType : donor.getOrganList()) {
                                    if (orgType.equalsIgnoreCase(organType)) {
                                        donor.setNetwork(network1.getName());
                                        donorL.add(donor);
                                    }
                                }
                            }
                        }
                   }
                }
            }

        }
        
        Map<Double, Donor> cityDistMap = distbtwCity(network, donorL);
        
        for(Donor obj : cityDistMap.values()){
            Object[] row = new Object[3];
            row[0] = obj;
            row[1] = obj.getNetwork();
            row[2] = obj.isIsOrganAvailable();

            dtm.addRow(row);
        }
        
    }
    
    public static double dist(double lattitude1, double longitude1, double latitude2, double longitude2, String str) {
           double teta = longitude1 - longitude2;
           double dist = Math.sin(deg2radian(lattitude1)) * Math.sin(deg2radian(latitude2)) 
                   + Math.cos(deg2radian(lattitude1)) * Math.cos(deg2radian(latitude2)) * Math.cos(deg2radian(teta));
           dist = Math.acos(dist);
           dist = rad2degree(dist);
           dist = dist * 60 * 1.1515;
           if (str.equals("K")) {
               dist = dist * 1.609344;
           } else if (str.equals("N")) {
               dist = dist * 0.8684;
           }
           return (dist);
       }
    
    public static double rad2degree(double rad) {
           return (rad * 180.0 / Math.PI);
       }

       public static double deg2radian(double deg) {
           return (deg * Math.PI / 180.0);
       }

       
       
       
    public static Map getGCodes(String address) {
           try {
               String geoCodeUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=";
               String key = "&key=AIzaSyBiz8PYrcTF4KFwOEpOANYPcgxZUDz3_kU";
               StringBuilder result = new StringBuilder();
               URL url = new URL(geoCodeUrl + address + key);
               HttpURLConnection connection = (HttpURLConnection) url.openConnection();
               connection.setRequestMethod("GET");
               BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));
               
               String lin;
               while ((lin = rd.readLine()) != null) {
                   result.append(lin);
               }
               rd.close();
               Map resultMap = new ObjectMapper().readValue(result.toString(), Map.class);
               return (Map) ((Map) ((Map) ((List) resultMap.get("results")).get(0)).get("geometry")).get("location");
           } catch (Throwable throwable) {
               
               throwable.printStackTrace();
           }
           return null;
       }
    
    private Map<Double, Donor> distbtwCity(String first, List<Donor> donorL) {
        
        Map<Double, Donor> cityDMap = new TreeMap<Double, Donor>();
        
        for(Donor d : donorL){
            
            double dist = getDist(first, d.getNetwork());
            cityDMap.put(dist, d);
        }
        return cityDMap;
    }
    
    public static double getDist(String fromAdd, String toAdd) {
        
            Map from = getGCodes(fromAdd);
            Map to = getGCodes(toAdd);
            return dist((Double) from.get("lat"), (Double) from.get("lng"), (Double) to.get("lat"), (Double) to.get("lng"), "K");

        }
    
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed

        ManageOrganMatchInitialRoute ManageCitiesNetwork = new ManageOrganMatchInitialRoute(ecoSystem, panel);
        panel.add("manageNetworksJPanel", ManageCitiesNetwork);
        CardLayout layout = (CardLayout) panel.getLayout();
        layout.next(panel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void seePieChartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seePieChartBtnActionPerformed

        int num1 = this.applicantInfoTbl.getRowCount();
        int num2 = this.recipientInfoTbl.getRowCount();

        Frame frame1 = new Frame();

        DefaultPieDataset pie = new DefaultPieDataset();
        
        pie.setValue("Total Recipients by Severity", num2);
        pie.setValue("Total Donor Count", num1);
        
        JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pie, true, true, true);

        ChartPanel chartP = new ChartPanel(chart);
        frame1.add(chartP);

        frame1.pack();
        frame1.setVisible(true);
        chartP.setSize(600, 600);
        chartP.setVisible(true);
    }//GEN-LAST:event_seePieChartBtnActionPerformed

    private void informAboutMatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informAboutMatchBtnActionPerformed

        int selectedRow = applicantInfoTbl.getSelectedRow();

        if (selectedRow >= 0) {
            donor = (Donor) applicantInfoTbl.getValueAt(selectedRow, 0);
           try {
                //System.out.println("Recipienttttttt"+recipient.getPersonEmailId());
                //            sendOutEmail(recipient.getPersonEmailId());
//            sendOutEmail(donor.getPersonEmailId());
                emailApproved("amit3012yadav@gmail.com");
                JOptionPane.showMessageDialog(null, "Email has been sent successfully regarding Organ match");

            } catch (Exception ex) {
                Logger.getLogger(OrganMatchByDonorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_informAboutMatchBtnActionPerformed

        public static void emailApproved (String recepient) throws Exception {
        System.out.println("Preparing to send email");
        Properties properties = new Properties ();
        properties.put ("mail.smtp.auth","true");
        properties.put ("mail.smtp.starttls.enable","true");
        properties.put ("mail.smtp.host" , "smtp.gmail.com");
        properties.put ("mail.smtp.port","587");
        String myAccountEmail = "derrickrose3012@gmail.com";
        String password = "vbfknvllsxyfxcrq";

        Session session = Session.getInstance (properties, new Authenticator () {
        @Override
            protected PasswordAuthentication getPasswordAuthentication () {
                return new PasswordAuthentication (myAccountEmail, password);
            }
            });
        Message message = prepareMessage (session, myAccountEmail, recepient);
        Transport.send (message);
        //System.out.println("Message sent successfully");
    }
    private static Message prepareMessage (Session session, String myAccountEmail, String recepient) {
        try{
            Message message = new MimeMessage (session);
            message.setFrom(new InternetAddress (myAccountEmail));
            message. setRecipient (Message.RecipientType.TO, new InternetAddress (recepient));
            message.setSubject("Match organ donation");
            message. setText ("You have found a match, contact hospital receptionist for info");
        return message;
        } catch (Exception ex) {
//        Logger.getLogger(Emailcode.class.getName ()). log (Level.SEVERE, null, ex);
        }
        return null;
        }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable applicantInfoTbl;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton findMatchBtn;
    private javax.swing.JButton informAboutMatchBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable recipientInfoTbl;
    private javax.swing.JButton seePieChartBtn;
    // End of variables declaration//GEN-END:variables
}
